{"version":3,"sources":["components/MovieCard.js","components/HeaderButton.js","components/Search.js","pages/Favorites.js","pages/Home.js","pages/FullMoviePage.js","components/App.js","index.js"],"names":["MovieCard","props","movie","poster_path","title","overview","vote_average","id","details","release_date","runtime","genres","imageURL","className","src","onClick","handleMovieClick","alt","substr","map","item","name","HeaderButton","buttonTitle","Search","useState","query","setQuery","onSubmit","event","preventDefault","type","placeholder","autoComplete","onChange","e","target","value","Favorites","Home","API_KEY","process","history","useHistory","movies","isLoading","searchRequest","searchComplete","search","a","axios","get","response","Promise","all","data","results","getDetails","push","movieIDList","console","log","loading","FullMoviePage","clickedMovieState","cast","castIsLoading","castData","setCastData","useEffect","result","splice","fetchCast","divCastStyling","margin","display","flexFlow","imgCastStyling","alignSelf","borderRadius","boxShadow","height","width","pCastStyling","fontSize","padding","textAlign","pCastStyling2","color","backdrop_path","to","tagline","person","style","profile_path","character","budget","toLocaleString","href","imdb_id","initialState","movieSearchReducer","state","action","MOVIE_SEARCH_REQUEST","MOVIE_SEARCH_COMPLETE","payload","useReducer","dispatch","isClicked","setClickedMovieState","searchRequestDispatch","searchCompleteDispatch","clickedMovie","find","exact","path","render","component","ReactDOM","document","querySelector"],"mappings":"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","file":"static/js/main.7bc9e834.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"../style.css\";\r\n\r\nconst MovieCard = props => {\r\n  // !! Potential hover effect to be added later\r\n  // const [isHovering, setIsHovering] = useState(false);\r\n\r\n  const { poster_path, title, overview, vote_average, id } = props.movie;\r\n  const { release_date, runtime, genres } = props.movie.details;\r\n\r\n  const imageURL = `https://image.tmdb.org/t/p/original${poster_path}`;\r\n\r\n  // !! const handleMouseEnter = () => {\r\n  //   setIsHovering(true);\r\n  // };\r\n\r\n  // !! const handleMouseLeave = () => {\r\n  //   setIsHovering(false);\r\n  // };\r\n\r\n  return (\r\n    <div className=\"card-container\">\r\n      <div className=\"poster-container\">\r\n        <div className=\"rating\">\r\n          <h2>\r\n            <i className=\"fas fa-star\"></i>\r\n            {vote_average}\r\n          </h2>\r\n        </div>\r\n\r\n        <div className=\"runtime\">\r\n          <h2>\r\n            <i className=\"fas fa-stopwatch\"></i>\r\n            {runtime + \" min\"}\r\n          </h2>\r\n        </div>\r\n\r\n        <img\r\n          src={imageURL}\r\n          onClick={() => props.handleMovieClick(id)}\r\n          alt={`${title} poster`}\r\n          // !! onMouseEnter={handleMouseEnter}\r\n          // !! onMouseLeave={handleMouseLeave}\r\n        ></img>\r\n      </div>\r\n      <div className=\"moviedata-container\">\r\n        <div>\r\n          <h4>\r\n            {release_date.substr(0, 4)}\r\n            {genres.map(item => {\r\n              return item.name + \", \";\r\n            })}\r\n          </h4>\r\n          <h1>{title}</h1>\r\n        </div>\r\n        <p>{overview}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MovieCard;\r\n","import React from \"react\";\r\n\r\nconst HeaderButton = props => {\r\n  return (\r\n    <div>\r\n      <button onClick={props.onClick}>{props.buttonTitle}</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HeaderButton;\r\n","import React, { useState } from \"react\";\r\n\r\nconst Search = props => {\r\n  const [query, setQuery] = useState(\"\");\r\n\r\n  const handleSearchSubmit = event => {\r\n    event.preventDefault();\r\n    props.onSubmit(query);\r\n  };\r\n\r\n  const handleChange = e => {\r\n    setQuery(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-container\">\r\n      <form onSubmit={handleSearchSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search...\"\r\n          name=\"search\"\r\n          autoComplete=\"off\"\r\n          onChange={handleChange}\r\n        />\r\n        <button type=\"submit\">\r\n          <i className=\"fas fa-search\"></i>\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\n\r\nconst Favorites = props => {\r\n  const clickHandler = props => {};\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={clickHandler} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Favorites;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nimport MovieCard from \"../components/MovieCard\";\r\nimport HeaderButton from \"../components/HeaderButton\";\r\nimport Search from \"../components/Search\";\r\n\r\nimport Favorites from \"./Favorites\";\r\n\r\nimport \"../style.css\";\r\n\r\nconst Home = props => {\r\n  const API_KEY = process.env.REACT_APP_TMDB_API_KEY; // TheMovieDB API Key\r\n  const history = useHistory();\r\n  const {\r\n    movies,\r\n    isLoading,\r\n    searchRequest,\r\n    searchComplete,\r\n    handleMovieClick\r\n  } = props;\r\n\r\n  // defaults = [1124, 335984, 1551398,  [\"374720\", ]\r\n\r\n  const search = async query => {\r\n    searchRequest();\r\n    const response = await axios.get(\r\n      `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\r\n    );\r\n\r\n    await Promise.all(\r\n      response.data.results.map(async movie => {\r\n        movie.details = await getDetails(movie.id);\r\n      })\r\n    );\r\n    // !! add error handling...\r\n    // Call function passed in as props to lift results up to state in App.js\r\n    return searchComplete(response.data.results);\r\n  };\r\n\r\n  // Append details object to each movie\r\n  const getDetails = async id => {\r\n    const response = await axios.get(\r\n      `https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}&language=en-US`\r\n    );\r\n\r\n    return response.data;\r\n  };\r\n\r\n  return (\r\n    <div className=\"\">\r\n      <div className=\"header-container\">\r\n        <HeaderButton buttonTitle=\"My Favorites\" />\r\n        <HeaderButton buttonTitle=\"Upcoming Movies\" />\r\n        <HeaderButton\r\n          buttonTitle=\"Popular Movies\"\r\n          onClick={() => history.push(\"/popular\")}\r\n        />\r\n      </div>\r\n      <Search onSubmit={search} />\r\n      {isLoading && <span>loading...</span>}\r\n      <Favorites movieIDList={null} />\r\n      <div className=\"master-container\">\r\n        {console.log(movies)}\r\n        {movies.map(movie => {\r\n          return (\r\n            <MovieCard\r\n              movie={movie}\r\n              loading={isLoading}\r\n              handleMovieClick={handleMovieClick}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nimport \"./fullmoviepage.css\";\r\n\r\nconst FullMoviePage = props => {\r\n  const API_KEY = process.env.REACT_APP_TMDB_API_KEY;\r\n  const { movie } = props.clickedMovieState;\r\n  const { isLoading } = props;\r\n\r\n  const [castData, setCastData] = useState({\r\n    cast: [],\r\n    castIsLoading: true\r\n  });\r\n\r\n  useEffect(() => {\r\n    async function fetchCast() {\r\n      const result = await axios.get(\r\n        `https://api.themoviedb.org/3/movie/${movie.id}/credits?api_key=${API_KEY}`\r\n      );\r\n      result.data.cast.splice(4);\r\n      setCastData({\r\n        cast: result.data.cast,\r\n        castIsLoading: false\r\n      });\r\n    }\r\n    fetchCast();\r\n  }, [API_KEY, movie.id]);\r\n\r\n  const posterURL = \"https://image.tmdb.org/t/p/original/\";\r\n\r\n  const tempPersonURL = \"https://image.tmdb.org/t/p/w500\";\r\n\r\n  // Styles for Cast info\r\n  const divCastStyling = {\r\n    margin: \"0 .25em 0em .25em\",\r\n    display: \"flex\",\r\n    flexFlow: \"column\"\r\n  };\r\n  const imgCastStyling = {\r\n    alignSelf: \"center\",\r\n    borderRadius: \"50%\",\r\n    boxShadow: \"0px 0px 20px 0px rgba(0, 0, 0, 0.27)\",\r\n    height: \"auto\",\r\n    width: \"3em\"\r\n  };\r\n  const pCastStyling = {\r\n    fontSize: \".7em\",\r\n    margin: \".25em\",\r\n    padding: 0,\r\n    textAlign: \"center\"\r\n  };\r\n  const pCastStyling2 = {\r\n    fontSize: \".7em\",\r\n    margin: 0,\r\n    padding: 0,\r\n    textAlign: \"center\",\r\n    color: \"grey\"\r\n  };\r\n\r\n  // calculate runtime in hours?\r\n  // const calcRuntime = (num) => {\r\n  //   if (num % 60 == 0) {\r\n  //     return num / 60;\r\n  //   } else {\r\n  //     num / 60\r\n  //   }\r\n  // }\r\n\r\n  // you should get actor data on this page...\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {isLoading ? (\r\n        \"Loading Placeholder\"\r\n      ) : (\r\n        <div>\r\n          <div>\r\n            <img\r\n              className=\"top-image\"\r\n              src={posterURL + movie.backdrop_path}\r\n              alt={`${movie.title} + \" backdrop\"`}\r\n            />\r\n            <h1 className=\"title-text\">{movie.title}</h1>\r\n            <Link to=\"/\">Temp Back Link</Link>\r\n          </div>\r\n          <div className=\"info-container\">\r\n            <h3>\"{movie.details.tagline}\"</h3>\r\n\r\n            <div className=\"cast-container\">\r\n              {castData.cast.map(person => {\r\n                return (\r\n                  <div style={divCastStyling}>\r\n                    <img\r\n                      style={imgCastStyling}\r\n                      src={tempPersonURL + person.profile_path}\r\n                      alt={`Cast member: ${person.name}`}\r\n                    />\r\n                    <p style={pCastStyling}>{person.character}</p>\r\n                    <p style={pCastStyling2}>{person.name}</p>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n            <p>\r\n              Plot: <br /> {movie.overview}\r\n            </p>\r\n            <div className=\"footer-details\">\r\n              <p>\r\n                Release Date: <br />\r\n                {movie.release_date}\r\n              </p>\r\n              <p>\r\n                Budget:\r\n                <br /> {\"$ \" + movie.details.budget.toLocaleString()}\r\n              </p>\r\n              <a href={`https://www.imdb.com/title/${movie.details.imdb_id}`}>\r\n                <i className=\"fab fa-imdb fa-2x\"></i>\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FullMoviePage;\r\n","import { hot } from \"react-hot-loader/root\";\r\nimport React, { useReducer, useState, useEffect } from \"react\";\r\nimport { Switch, Route, useHistory } from \"react-router-dom\";\r\n\r\nimport Home from \"../pages/Home\";\r\nimport Favorites from \"../pages/Favorites\";\r\nimport FullMoviePage from \"../pages/FullMoviePage\";\r\nimport PopularMovies from \"../pages/PopularMovies\";\r\n\r\nimport \"../style.css\";\r\n\r\nconst initialState = {\r\n  isLoading: true,\r\n  movies: []\r\n};\r\n\r\nconst movieSearchReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case MOVIE_SEARCH_REQUEST:\r\n      return {\r\n        ...state,\r\n        isLoading: true\r\n      };\r\n    case MOVIE_SEARCH_COMPLETE:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        movies: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// write a reducer for clickedMovie actions???\r\n\r\n//React Hooks - Reducer Action Types\r\nconst MOVIE_SEARCH_REQUEST = \"MOVIE_SEARCH_REQUEST\";\r\nconst MOVIE_SEARCH_COMPLETE = \"MOVIE_SEARCH_COMPLETE\";\r\n\r\nconst App = () => {\r\n  const [state, dispatch] = useReducer(movieSearchReducer, initialState);\r\n\r\n  const [clickedMovieState, setClickedMovieState] = useState({\r\n    movie: [],\r\n    isClicked: false\r\n  });\r\n\r\n  const history = useHistory();\r\n\r\n  // use useffect deps or find a way to run this only if the id changes?\r\n\r\n  // Dispatch request helper function - to be passed down as props\r\n  const searchRequestDispatch = () => {\r\n    return dispatch({\r\n      type: MOVIE_SEARCH_REQUEST\r\n    });\r\n  };\r\n\r\n  // Dispatch complete helper function - to be passed down as props, lifts payload up to be stored in state.\r\n  const searchCompleteDispatch = payload => {\r\n    return dispatch({\r\n      type: MOVIE_SEARCH_COMPLETE,\r\n      payload\r\n    });\r\n  };\r\n\r\n  // extract to functional component...\r\n  const handleMovieClick = (id) /* needed? */ => {\r\n    const clickedMovie = movies.find(movie => movie.id === id);\r\n    setClickedMovieState({\r\n      movie: clickedMovie,\r\n      isClicked: true // needed?\r\n    });\r\n    history.push(\"/moviepage\");\r\n  };\r\n\r\n  const { movies, isLoading } = state;\r\n\r\n  return (\r\n    <Switch>\r\n      <Route\r\n        exact\r\n        path=\"/\"\r\n        render={() => (\r\n          <Home\r\n            movies={movies}\r\n            isLoading={isLoading}\r\n            searchRequest={searchRequestDispatch}\r\n            searchComplete={searchCompleteDispatch}\r\n            handleMovieClick={handleMovieClick}\r\n          />\r\n        )}\r\n      />\r\n      <Route\r\n        path=\"/moviepage\"\r\n        render={() => (\r\n          <FullMoviePage\r\n            clickedMovieState={clickedMovieState}\r\n            isLoading={isLoading}\r\n          />\r\n        )}\r\n      />\r\n      {/* <Route path=\"/byactor\" component={DiscoverByActor} /> */}\r\n\r\n      <Route path=\"/favorites\" component={Favorites} />\r\n      <Route\r\n        path=\"/popular\"\r\n        render={() => (\r\n          <PopularMovies // needs other state\r\n            clickedMovieState={clickedMovieState}\r\n            isLoading={isLoading}\r\n          />\r\n        )}\r\n      />\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default process.env.NODE_ENV === \"development\" ? hot(App) : App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.querySelector(\"#root\")\n);\n"],"sourceRoot":""}