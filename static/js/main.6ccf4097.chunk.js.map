{"version":3,"sources":["components/MovieCard/posterplaceholder.jpg","components/MovieCard/MovieCard.js","components/Navigation/HeaderLink.js","components/Navigation/Navigation.js","components/DataFetch/useAxiosHook.js","components/Search.js","components/PageSwitch.js","pages/Favorites.js","pages/Home.js","components/Cast.js","components/ExpandButton.js","pages/FullMoviePage.js","pages/PopularMovies.js","pages/UpcomingMovies.js","pages/DiscoverByActor.js","components/App.js","index.js"],"names":["module","exports","CardContainer","styled","div","StyledImg","img","StyledRuntime","RuntimeIcon","FontAwesomeIcon","attrs","icon","faStopwatch","StyledRating","RatingIcon","faStar","MovieCard","props","useState","setIsHovering","useHistory","movie","poster_path","title","release_date","vote_average","id","details","runtime","imageURL","genres","className","src","AltPoster","onClick","handleMovieClick","alt","onMouseEnter","onMouseLeave","StyledNavLink","NavLink","activeClassName","HeaderLink","exact","to","buttonTitle","StyledNavbar","Navigation","useAxiosHook","myUrl","data","setData","url","setUrl","isLoading","setIsLoading","isError","setIsError","useEffect","a","axios","get","response","Promise","all","results","map","process","responseDetails","fetchData","StyledInput","input","StyledButton","button","SearchIcon","faSearch","Search","query","setQuery","onSubmit","event","preventDefault","type","placeholder","name","autoComplete","onChange","target","value","Favorites","MovieContainer","Home","doFetch","CastText","p","ExpandButton","posterURL","MasterContainer","posterPath","LeftContainer","CenterContainer","BottomContainer","DetailContainer","MovieTitle","h1","DetailTitle","Poster","Text","MoviePlot","MovieTagline","h3","DownArrow","faChevronDown","FullMoviePage","API_KEY","clickedMovieState","window","innerWidth","backdrop_path","cast","crew","castIsLoading","castToggle","crewToggle","creditsData","setCreditsData","result","splice","director","find","person","job","writers","filter","composer","fetchCredits","tagline","href","imdb_id","console","log","item","arr","push","join","overview","budget","toLocaleString","PopularMovies","UpcomingMovies","currentDate","Date","setDate","getDate","searchDate","toISOString","substring","todayDate","DiscoverByActor","movies","searchRequest","searchComplete","search","loading","GlobalStyle","createGlobalStyle","history","setClickedMovieState","path","render","component","ReactDOM","basename","document","querySelector"],"mappings":"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","file":"static/js/main.6ccf4097.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/posterplaceholder.5eb0b883.jpg\";","import React, { useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport AltPoster from \"./posterplaceholder.jpg\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faStar, faStopwatch } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst CardContainer = styled.div`\r\n  position: relative;\r\n\r\n  flex: 1 0 15%;\r\n  margin: 1.5vw 1vw;\r\n  border-radius: 10px 10px 0 0;\r\n  transition: transform;\r\n  transition-duration: 0.25s;\r\n  color: white;\r\n\r\n  :hover {\r\n    cursor: pointer;\r\n    transform: scale(1.1);\r\n  }\r\n\r\n  @media screen and (max-width: 1025px) {\r\n    flex: 1 0 25%;\r\n  }\r\n\r\n  @media screen and (max-width: 361px) {\r\n    flex: 1 0 33%;\r\n  }\r\n`;\r\n\r\nconst StyledImg = styled.img`\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nconst StyledRuntime = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  text-shadow: #2c3949;\r\n  margin: 0.25rem;\r\n  padding: 0.3rem;\r\n  border-radius: 10%;\r\n  background-color: rgba(0, 0, 0, 0.808);\r\n`;\r\n\r\nconst RuntimeIcon = styled(FontAwesomeIcon).attrs({ icon: faStopwatch })`\r\n  font-size: 1em;\r\n`;\r\n\r\nconst StyledRating = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  /* text-shadow: #2c3949; */\r\n  margin: 0.25rem;\r\n  padding: 0.3rem;\r\n  border-radius: 10%;\r\n  background-color: rgba(0, 0, 0, 0.808);\r\n`;\r\n\r\nconst RatingIcon = styled(FontAwesomeIcon).attrs({ icon: faStar })`\r\n  color: gold;\r\n  margin: 0 0.5rem 0 0;\r\n`;\r\n\r\nconst MovieCard = props => {\r\n  // !! Potential hover effect to be added later\r\n  const [isHovering, setIsHovering] = useState(false);\r\n\r\n  const history = useHistory();\r\n\r\n  const { poster_path, title, release_date, vote_average, id } = props.movie;\r\n  const { runtime, genres } = props.movie.details;\r\n\r\n  const imageURL = `https://image.tmdb.org/t/p/w780${poster_path}`;\r\n\r\n  const handleMouseEnter = () => {\r\n    setIsHovering(true);\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    setIsHovering(false);\r\n  };\r\n\r\n  const bottomDiv = (\r\n    <div className=\"bottom-div\">\r\n      <p>Releases: {release_date}</p>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <CardContainer>\r\n      <StyledImg\r\n        src={poster_path ? imageURL : AltPoster}\r\n        onClick={() => props.handleMovieClick(props.movie)}\r\n        alt={`${title} poster`}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n      />\r\n      {runtime && (\r\n        <StyledRuntime>\r\n          <RuntimeIcon />\r\n          {runtime + \" min\"}\r\n        </StyledRuntime>\r\n      )}\r\n      {vote_average !== 0 && (\r\n        <StyledRating>\r\n          <RatingIcon />\r\n          {vote_average}\r\n        </StyledRating>\r\n      )}\r\n    </CardContainer>\r\n\r\n    //     {isHovering && bottomDiv}\r\n    //   </div>\r\n    //   {/* <div className=\"moviedata-container\">\r\n    //     <div>\r\n    //       <h4>\r\n    //         {release_date}\r\n    //         {genres.map(item => {\r\n    //           return item.name + \", \";\r\n    //         })}\r\n    //       </h4>\r\n    //       <h1>{title}</h1>\r\n    //     </div>\r\n    //     <p>{overview}</p>\r\n    //   </div> */}\r\n    // </div>\r\n  );\r\n};\r\n\r\nexport default MovieCard;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst activeClassName = \"active\"; // React Router NavLink default active link className\r\n\r\nconst StyledNavLink = styled(NavLink).attrs({ activeClassName })`\r\n  border: 1px solid #7ca887;\r\n  border: none;\r\n  box-shadow: 0em 0.2em #151c24;\r\n  background: none;\r\n  margin: 1em 0 0 0.5em;\r\n  padding: 0 0.5em 0.2em;\r\n  outline: none;\r\n  text-decoration: none;\r\n  font: inherit;\r\n  font-size: 1.25em;\r\n  font-weight: 600;\r\n  transition: all 0.2s ease-in-out;\r\n  color: #7ca887;\r\n\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n\r\n  &.${activeClassName} {\r\n    box-shadow: 0em 0.2em teal;\r\n  }\r\n`;\r\n\r\nconst HeaderLink = props => {\r\n  // .form-container button:hover {\r\n  //   transform: scale(1.15);\r\n  //   background: #2769b4;\r\n  //   color: black;\r\n  //   border-radius: 10;\r\n  // }}\r\n\r\n  return (\r\n    <StyledNavLink exact to={`${props.to}`}>\r\n      {props.buttonTitle}{\" \"}\r\n    </StyledNavLink>\r\n  );\r\n};\r\n\r\nexport default HeaderLink;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport HeaderLink from \"./HeaderLink\";\r\n\r\nconst StyledNavbar = styled.div`\r\n  display: flex;\r\n  margin: 1em;\r\n\r\n  @media screen and (max-width: 480px) {\r\n    font-size: 0.5em;\r\n  }\r\n`;\r\n\r\nconst Navigation = props => {\r\n  return (\r\n    <StyledNavbar>\r\n      <HeaderLink to=\"/\" buttonTitle=\"Search\" />\r\n      <HeaderLink to=\"/upcoming\" buttonTitle=\"Upcoming Movies\" />\r\n      <HeaderLink to=\"/popular\" buttonTitle=\"Popular Movies\" />\r\n      <HeaderLink to=\"/byactor\" buttonTitle=\"Discover by Actor\" />\r\n    </StyledNavbar>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst API_KEY = process.env.REACT_APP_TMDB_API_KEY;\r\n\r\n// The goal of this component was to create a reusable custom hook to fetch data throughout the app.\r\n\r\n// Search - needs to feed in url, query, and Api key\r\n\r\n// Upcoming - needs to feed in url wit hdates... and apikey\r\n\r\n//Popular - needs the same. All also require the getdails function...\r\n\r\n// ! if this is composed properly, useeffect should run every time there is a change in url. so the url can be external, and the url should have the page data plugged in.\r\n\r\nconst useAxiosHook = myUrl => {\r\n  const [data, setData] = useState([]);\r\n  const [url, setUrl] = useState(myUrl);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isError, setIsError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setIsError(false);\r\n      setIsLoading(true);\r\n\r\n      try {\r\n        const response = await axios.get(url);\r\n\r\n        // Gets response, makes request to grab additional details for each movie, appends details to each movie object.\r\n        await Promise.all(\r\n          response.data.results.map(async movie => {\r\n            const responseDetails = await axios.get(\r\n              `https://api.themoviedb.org/3/movie/${movie.id}?api_key=${API_KEY}&language=en-US`\r\n            );\r\n            movie.details = responseDetails.data;\r\n          })\r\n        );\r\n\r\n        setData(response.data.results);\r\n      } catch (error) {\r\n        setIsError(true);\r\n      }\r\n\r\n      setIsLoading(false);\r\n    };\r\n\r\n    fetchData();\r\n  }, [url]);\r\n\r\n  return [{ data, isLoading, isError }, setUrl];\r\n};\r\n\r\nexport default useAxiosHook;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst StyledInput = styled.input`\r\n  height: 2rem;\r\n  width: 100px;\r\n  transition: all 0.4s ease-in-out;\r\n  background: #151c24;\r\n  font-size: 20px;\r\n  padding: 0.5rem 1rem 0.5rem 1rem;\r\n  border: 2px solid black;\r\n  border-radius: 40px;\r\n  outline: none;\r\n  color: white;\r\n  font-family: inherit;\r\n  margin: 0;\r\n\r\n  :focus {\r\n    width: 200px;\r\n    border-color: #2769b4;\r\n  }\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\n  width: 3rem;\r\n  height: 3rem;\r\n  border-radius: 50%;\r\n  border: 2px solid black;\r\n  margin: 0 0 0 0.5rem;\r\n  background: #151c24;\r\n  outline: none;\r\n  font-size: 1rem;\r\n  transition: all 0.2s ease-in-out;\r\n  color: white;\r\n\r\n  :hover {\r\n    cursor: pointer;\r\n    transform: scale(1.15);\r\n    background: #2769b4;\r\n    color: black;\r\n    border-radius: 10%;\r\n  }\r\n`;\r\n\r\nconst SearchIcon = styled(FontAwesomeIcon).attrs({ icon: faSearch })`\r\n  color: white;\r\n  font-size: 1em;\r\n`;\r\n\r\nconst Search = props => {\r\n  const [query, setQuery] = useState(\"\");\r\n  const API_KEY = process.env.REACT_APP_TMDB_API_KEY;\r\n  const url = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false&840`;\r\n\r\n  return (\r\n    <form\r\n      onSubmit={event => {\r\n        props.onSubmit(url);\r\n        event.preventDefault();\r\n      }}\r\n    >\r\n      <StyledInput\r\n        type=\"text\"\r\n        placeholder=\"Search...\"\r\n        name=\"search\"\r\n        autoComplete=\"off\"\r\n        onChange={event => setQuery(event.target.value)}\r\n      />\r\n      <StyledButton type=\"submit\">\r\n        <SearchIcon />\r\n      </StyledButton>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\n// import MovieCard from \"../components/MovieCard/MovieCard\";\r\n// import Navigation from \"../components/Navigation/Navigation\";\r\n// import Search from \"../components/Search\";\r\n\r\nconst StyledDiv = styled.div`\r\n  display: flex;\r\n  width: 10rem;\r\n  height: 2rem;\r\n  background-color: #151c24;\r\n`;\r\n\r\n// on button click, increment state to increase the page queried through existing usestate\r\n// grab page data in home.js, store in state.\r\n// render the amount of pages availabe based on the state.\r\n\r\n// take in on search submit?\r\n\r\nconst StyledNumButton = styled.button``;\r\n\r\nconst StyledNextButton = styled.button`\r\n  background: none;\r\n  color: white;\r\n  border: none;\r\n  outline: none;\r\n  align-self: center;\r\n\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst StyledPreviousButton = styled.button``;\r\n\r\n// const onButtonClick = (props) => {\r\n\r\n//     )\r\n// }\r\n\r\n// useEffect({\r\n//     if(props.pageData.currentPage )\r\n// })\r\n\r\nconst PageSwitch = props => {\r\n  const { pageData } = props;\r\n\r\n  return (\r\n    <>\r\n      <StyledDiv>\r\n        <StyledNextButton>Load More Results</StyledNextButton>\r\n      </StyledDiv>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PageSwitch;\r\n","import React from \"react\";\r\n\r\nconst Favorites = props => {\r\n  const clickHandler = props => {};\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={clickHandler} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Favorites;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport MovieCard from \"../components/MovieCard/MovieCard\";\r\nimport Navigation from \"../components/Navigation/Navigation\";\r\nimport useAxiosHook from \"../components/DataFetch/useAxiosHook\";\r\nimport Search from \"../components/Search\";\r\nimport PageSwitch from \"../components/PageSwitch\";\r\n\r\nimport Favorites from \"./Favorites\";\r\n\r\nconst MovieContainer = styled.div`\r\n  display: flex;\r\n  flex-flow: row wrap;\r\n  justify-content: space-around;\r\n  margin: 1vw 1.5vw;\r\n\r\n  @media screen and (max-width: 361px) {\r\n  }\r\n`;\r\n\r\nconst Home = props => {\r\n  const { handleMovieClick } = props;\r\n\r\n  const [{ data, isLoading, isError }, doFetch] = useAxiosHook();\r\n\r\n  // defaults = [1124, 335984, 1551398,  [\"374720\", ]\r\n\r\n  return (\r\n    <div>\r\n      <Navigation />\r\n      <Search onSubmit={doFetch} />\r\n      <MovieContainer>\r\n        {data.map(movie => {\r\n          return (\r\n            <MovieCard movie={movie} handleMovieClick={handleMovieClick} />\r\n          );\r\n        })}\r\n      </MovieContainer>\r\n      {/* <PageSwitch incrementPage={pageData} /> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst CastContainer = styled.div`\r\n  margin: 0 0.25em 0em 0.25em;\r\n  display: flex;\r\n  flex-flow: column;\r\n  width: 7rem;\r\n`;\r\n\r\nconst CastImg = styled.img`\r\n  align-self: center;\r\n  border-radius: 15%;\r\n  box-shadow: 0px 0px 20px 0px rgba(0, 0, 0, 0.27);\r\n  height: 6rem;\r\n  width: auto;\r\n`;\r\n\r\nconst CastText = styled.p`\r\n  font-size: 0.7rem;\r\n  margin: 0.25em;\r\n\r\n  padding: 0;\r\n  text-align: center;\r\n`;\r\n\r\nconst CastPerson = styled(CastText)`\r\n  margin: 0;\r\n  color: grey;\r\n`;\r\n\r\nconst Cast = props => {\r\n  const tempPersonURL = \"https://image.tmdb.org/t/p/w500\";\r\n  const { cast } = props;\r\n\r\n  // Styles for Cast info\r\n\r\n  //   const CastPerson = {\r\n  //     fontSize: \".7em\",\r\n  //     margin: 0,\r\n  //     padding: 0,\r\n  //     textAlign: \"center\",\r\n  //     color: \"grey\"\r\n  //   };\r\n\r\n  const castLayout = cast.map(person => {\r\n    return (\r\n      <CastContainer>\r\n        <CastImg\r\n          src={tempPersonURL + person.profile_path}\r\n          alt={`Cast member: ${person.name}`}\r\n        />\r\n        <CastText>{person.character}</CastText>\r\n        <CastPerson>{person.name}</CastPerson>\r\n      </CastContainer>\r\n    );\r\n  });\r\n\r\n  // prettier-ignore\r\n  return (\r\n    <>\r\n      {castLayout}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Cast;\r\n","import React from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\n// const Button = styled.button`\r\n//   border-radius: 0;\r\n//   border: 2px solid black;\r\n//   margin: 0 0 0 0.5em;\r\n//   padding: 0.1em;\r\n//   background: #151c24;\r\n//   outline: none;\r\n//   font: inherit;\r\n//   font-size: 2rem;\r\n//   transition: all 0.2s ease-in-out;\r\n//   color: #7ca887;\r\n// `;\r\n\r\nconst ExpandButton = props => {\r\n  // .form-container button:hover {\r\n  //   transform: scale(1.15);\r\n  //   background: #2769b4;\r\n  //   color: black;\r\n  //   border-radius: 10;\r\n  // }}\r\n\r\n  return <button onClick={props.onClick}>{props.buttonTitle}</button>;\r\n};\r\n\r\nexport default ExpandButton;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport useAxiosHook from \"../components/DataFetch/useAxiosHook\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faChevronDown } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport Cast from \"../components/Cast\";\r\n\r\nimport ExpandButton from \"../components/ExpandButton\";\r\n\r\n// import \"./fullmoviepage.css\";\r\n\r\nconst posterURL = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nconst MasterContainer = styled.div`\r\n  background: linear-gradient(360deg, rgba(0, 0, 0, 1), rgba(0, 0, 0, 0.25)),\r\n    url(${props => posterURL + props.posterPath});\r\n  background-size: cover;\r\n  height: 100vh;\r\n  /* box-shadow: inset 0px 0px 3em 0px rgba(0, 0, 0, 0.75); */\r\n  font-size: 24px;\r\n  color: white;\r\n  display: flex;\r\n`;\r\n\r\nconst LeftContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  /* background: linear-gradient(360deg, rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0)); */\r\n  justify-content: center;\r\n  align-items: center;\r\n  text-align: center;\r\n  background: linear-gradient(\r\n    90deg,\r\n    rgba(0, 0, 0, 0.9) 0%,\r\n    rgba(0, 0, 0, 0.5) 80%,\r\n    rgba(0, 0, 0, 0.2) 90%,\r\n    rgba(0, 0, 0, 0) 100%\r\n  );\r\n  /* background: linear-gradient(rgba(0, 0, 0, 0.78), rgba(0, 0, 0, 0.78)); */\r\n  padding: 1em 2.5em 0 2.5em;\r\n`;\r\n\r\nconst CenterContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-self: flex-end;\r\n  width: 40em;\r\n  /* background: linear-gradient(rgba(0, 0, 0, 0.78), rgba(0, 0, 0, 0.78)); */\r\n  padding: 0.5em 1em;\r\n`;\r\n\r\nconst CastContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n`;\r\n\r\nconst BottomContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst DetailContainer = styled.div`\r\n  display: flex;\r\n  margin: 1rem;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst MovieTitle = styled.h1`\r\n  font-family: \"Titillium Web\", sans-serif;\r\n  font-size: 3rem;\r\n  text-shadow: -1px -1px 1px #aaa, 0px 4px 1px rgba(0, 0, 0, 0.5),\r\n    4px 4px 5px rgba(0, 0, 0, 0.7), 0px 0px 7px rgba(0, 0, 0, 0.4);\r\n  margin: 0;\r\n  padding: 0;\r\n`;\r\n\r\nconst DetailTitle = styled(MovieTitle)`\r\n  font-size: 1rem;\r\n  font-weight: 600;\r\n  text-align: center;\r\n`;\r\n\r\nconst Poster = styled.img`\r\n  width: 15em;\r\n  box-shadow: 10px 10px 38px 19px rgba(255, 255, 255, 0.1);\r\n  filter: blur(0.0001em);\r\n`;\r\n\r\nconst Text = styled.p`\r\n  font-size: 0.75em;\r\n  margin: 0 0 1rem 0;\r\n`;\r\n\r\nconst MoviePlot = styled(Text)`\r\n  font-size: 0.75em;\r\n`;\r\n\r\n// const PlayButton = styled.button`\r\n//   height: 3rem;\r\n//   width: 3rem;\r\n//   margin: 0;\r\n//   color: red;\r\n//   order: 1;\r\n//   justify-self: center;\r\n//   align-self: center;\r\n// `;\r\n\r\nconst MovieTagline = styled.h3`\r\n  font-size: 1.05em;\r\n  font-family: \"Titillium Web\", sans-serif;\r\n  margin-top: 0.25em;\r\n  width: 14em;\r\n`;\r\n\r\nconst DownArrow = styled(FontAwesomeIcon).attrs({ icon: faChevronDown })`\r\n  align-self: center;\r\n  font-size: 2em;\r\n`;\r\n\r\nconst FullMoviePage = props => {\r\n  const API_KEY = process.env.REACT_APP_TMDB_API_KEY;\r\n\r\n  const { movie } = props.clickedMovieState;\r\n\r\n  const [{ data }] = useAxiosHook();\r\n\r\n  // Over a certain width, take the top hero image and render it as the background image, overlaying all other components.\r\n  const isMobile = window.innerWidth > 800;\r\n\r\n  // !! Styled Components Code\r\n  // ? Can I put an if statement below and adapt it dynamically, or do I need state/props?\r\n\r\n  //css\r\n  const bodyStyle = {\r\n    background: `linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url(${posterURL +\r\n      movie.backdrop_path})`,\r\n    backgroundSize: \"cover\",\r\n    height: \"100vh\",\r\n    boxShadow: \"inset 1px 0px 3em 0px rgba(0,0,0,0.75)\",\r\n    WebkitBoxShadow: \"inset 0px 0px 84px 0px rgba(0,0,0,0.75)\",\r\n    MozBoxShadow: \"inset 1px 0px 84px 0px rgba(0,0,0,0.75)\"\r\n  };\r\n\r\n  const [creditsData, setCreditsData] = useState({\r\n    cast: [],\r\n    crew: {},\r\n    castIsLoading: true,\r\n    castToggle: false,\r\n    crewToggle: false\r\n  });\r\n\r\n  useEffect(() => {\r\n    let cast = [];\r\n    let crew = {};\r\n    async function fetchCredits() {\r\n      const result = await axios.get(\r\n        `https://api.themoviedb.org/3/movie/${movie.id}/credits?api_key=${API_KEY}`\r\n      );\r\n      // cast = result.data.cast;\r\n      // console.log(result, \"cast\");\r\n      // cast.splice(4);\r\n\r\n      // crew.director = result.data.crew.find(\r\n      //   person => person.job === \"Director\"\r\n      // );\r\n      // console.log(crewArr.director, \"director found?\");\r\n      // crewArr.writers = result.data.crew.filter(\r\n      //   person => person.department === \"Writing\"\r\n      // );\r\n      // crewArr.composer = result.data.crew.find(\r\n      //   person => person.job === \"Original Music Composer\"\r\n      // );\r\n      // console.log(crewArr.composer, \"composer found?\");\r\n      cast = result.data.cast;\r\n      cast.splice(4);\r\n      crew.director = result.data.crew.find(\r\n        person => person.job === \"Director\"\r\n      );\r\n      crew.writers = result.data.crew.filter(\r\n        person => person.job === \"Screenplay\" || person.job === \"Writer\"\r\n      );\r\n      crew.composer = result.data.crew.find(\r\n        person => person.job === \"Original Music Composer\"\r\n      );\r\n      // console.log(result.data.crew);\r\n      setCreditsData({\r\n        cast: cast,\r\n        crew: crew,\r\n        castIsLoading: false\r\n      });\r\n    }\r\n    fetchCredits();\r\n  }, [API_KEY, movie.id]);\r\n\r\n  const tempPersonURL = \"https://image.tmdb.org/t/p/w500\";\r\n\r\n  // you should get actor data on this page...\r\n\r\n  return (\r\n    // Desktop version\r\n    <MasterContainer posterPath={movie.backdrop_path}>\r\n      <LeftContainer>\r\n        <Poster src={posterURL + movie.poster_path}></Poster>\r\n        {movie.details && (\r\n          <MovieTagline>\"{movie.details.tagline}\"</MovieTagline>\r\n        )}\r\n\r\n        <a href={`https://www.imdb.com/title/${movie.details.imdb_id}`}>\r\n          {/* <i className=\"fab fa-imdb fa-2x\"></i> */}\r\n        </a>\r\n        <ExpandButton buttonTitle=\"Trailer\"></ExpandButton>\r\n        <Link to=\"/\">Temp Back Link</Link>\r\n        {/* Above, only the release date, rating (IMDB), and IMDB Link */}\r\n      </LeftContainer>\r\n      <CenterContainer>\r\n        <MovieTitle>{movie.title}</MovieTitle>\r\n        {console.log(data)}\r\n        <Text>\r\n          {movie.details.genres\r\n            .map(item => {\r\n              let arr = [];\r\n              arr.push(item.name);\r\n              return arr;\r\n            })\r\n            .join(\", \")}\r\n        </Text>\r\n        <MoviePlot>{movie.overview}</MoviePlot>\r\n        {/* <CastContainer>\r\n           !! Make A button  \r\n          <Cast style={{ flexDirection: \"row\" }} cast={creditsData.cast} /> \r\n          <ExpandButton\r\n            buttonTitle=\"Cast\"\r\n            onClick={() =>\r\n              setCreditsData(prevState => ({\r\n                ...prevState,\r\n                castToggle: !prevState.castToggle\r\n              }))\r\n            }\r\n          /> \r\n          {creditsData.castToggle && castData} \r\n        </CastContainer> */}\r\n        <BottomContainer>\r\n          <DetailContainer>\r\n            <DetailTitle>Director:</DetailTitle>\r\n            {creditsData.crew.director && (\r\n              <Text>{creditsData.crew.director.name}</Text>\r\n            )}\r\n          </DetailContainer>\r\n          <DetailContainer>\r\n            <DetailTitle>Composer:</DetailTitle>\r\n            {creditsData.crew.composer && (\r\n              <Text>{creditsData.crew.composer.name}</Text>\r\n            )}\r\n          </DetailContainer>\r\n          <DetailContainer>\r\n            <DetailTitle>Screenplay:</DetailTitle>\r\n            {creditsData.crew.writers && (\r\n              <Text>\r\n                {creditsData.crew.writers.map(person => person.name).join(\", \")}\r\n              </Text>\r\n            )}\r\n          </DetailContainer>\r\n          <DetailContainer>\r\n            <DetailTitle>Budget:</DetailTitle>\r\n            {movie.details.budget === 0 ? (\r\n              <Text>Not Available</Text>\r\n            ) : (\r\n              <Text> {\"$ \" + movie.details.budget.toLocaleString()}</Text>\r\n            )}\r\n          </DetailContainer>\r\n          <DetailContainer>\r\n            <DetailTitle>Release Date:</DetailTitle>\r\n            <Text>{movie.release_date}</Text>\r\n          </DetailContainer>\r\n        </BottomContainer>\r\n        <DownArrow></DownArrow>\r\n      </CenterContainer>\r\n    </MasterContainer>\r\n  );\r\n};\r\n\r\n// mobile??\r\n//     <div className=\"container\">\r\n//       <DesktopBackground>\r\n//         {isLoading ? (\r\n//           \"Loading Placeholder\"\r\n//         ) : (\r\n//           <div>\r\n//             <div>\r\n//               {/* <img\r\n//               className=\"top-image\"\r\n//               src={posterURL + movie.backdrop_path}\r\n//               alt={`${movie.title} + \" backdrop\"`}\r\n//             /> */}\r\n//               <h1 className=\"title-text\">{movie.title}</h1>\r\n//               <Link to=\"/\">Temp Back Link</Link>\r\n//             </div>\r\n//             <div className=\"info-container\">\r\n//               <h3>\"{movie.details.tagline}\"</h3>\r\n\r\n//               <div className=\"cast-container\">\r\n//                 <ExpandButton\r\n//                   buttonTitle=\"Cast\"\r\n//                   onClick={() =>\r\n//                     setCreditsData(prevState => ({\r\n//                       ...prevState,\r\n//                       castToggle: !prevState.castToggle\r\n//                     }))\r\n//                   }\r\n//                 />\r\n//                 {creditsData.castToggle && castData}\r\n//               </div>\r\n//               <p>\r\n//                 Plot: <br /> {movie.overview}\r\n//               </p>\r\n//               <div className=\"footer-details\">\r\n//                 {/* <ExpandButton\r\n//                 buttonTitle=\"Director\"\r\n//                 onClick={() => {\r\n//                   return (\r\n//                     <div>\r\n//                       {creditsData.crew.name}\r\n//                       <img\r\n//                         src={tempPersonURL + creditsData.crew.profile_path}\r\n//                       ></img>\r\n//                     </div>\r\n//                   );\r\n//                 }}\r\n//               /> */}\r\n//                 <p>\r\n//                   Release Date: <br />\r\n//                   {movie.release_date}\r\n//                 </p>\r\n//                 <p>\r\n//                   Budget:\r\n//                   <br /> {\"$ \" + movie.details.budget.toLocaleString()}\r\n//                 </p>\r\n//                 <a href={`https://www.imdb.com/title/${movie.details.imdb_id}`}>\r\n//                   <i className=\"fab fa-imdb fa-2x\"></i>\r\n//                 </a>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         )}\r\n//       </DesktopBackground>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\nexport default FullMoviePage;\r\n","import React from \"react\";\r\nimport useAxiosHook from \"../components/DataFetch/useAxiosHook\";\r\nimport styled from \"styled-components\";\r\n\r\nimport MovieCard from \"../components/MovieCard/MovieCard\";\r\nimport Navigation from \"../components/Navigation/Navigation\";\r\n\r\nconst MovieContainer = styled.div`\r\n  display: flex;\r\n  flex-flow: row wrap;\r\n  margin: 1vw 1vw;\r\n`;\r\n\r\nconst PopularMovies = props => {\r\n  const API_KEY = process.env.REACT_APP_TMDB_API_KEY;\r\n  const url = `https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1`;\r\n\r\n  const [{ data, isLoading, isError }] = useAxiosHook(url);\r\n\r\n  const { handleMovieClick } = props;\r\n\r\n  return (\r\n    <div>\r\n      <Navigation />\r\n      <h1>movies</h1>\r\n      {isError && <div>An error occured, please try again.</div>}\r\n      {isLoading ? (\r\n        <div>Loading...</div>\r\n      ) : (\r\n        <MovieContainer>\r\n          {data.map(movie => {\r\n            return (\r\n              <MovieCard movie={movie} handleMovieClick={handleMovieClick} />\r\n            );\r\n          })}\r\n        </MovieContainer>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PopularMovies;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport MovieCard from \"../components/MovieCard/MovieCard\";\r\nimport Navigation from \"../components/Navigation/Navigation\";\r\nimport useAxiosHook from \"../components/DataFetch/useAxiosHook\";\r\n\r\nconst MovieContainer = styled.div`\r\n  display: flex;\r\n  flex-flow: row wrap;\r\n  margin: 1vw 1vw;\r\n`;\r\n\r\nconst UpcomingMovies = props => {\r\n  const API_KEY = process.env.REACT_APP_TMDB_API_KEY;\r\n\r\n  // Get date three months from now. Convert date to TMDB API's required syntax.\r\n  let currentDate = new Date();\r\n  currentDate.setDate(currentDate.getDate() + 90);\r\n  let searchDate = currentDate.toISOString().substring(0, 10);\r\n  const todayDate = new Date().toISOString().substring(0, 10);\r\n\r\n  const url = `https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&language=en-US&region=US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1&release_date.gte=${todayDate}&release_date.lte=${searchDate}&with_release_type=3%7C2`;\r\n\r\n  const { handleMovieClick } = props;\r\n  const [{ data, isLoading, isError }] = useAxiosHook(url);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"header-container\">\r\n        <Navigation />\r\n      </div>\r\n      <h1>Not Yet Released....</h1>\r\n      {isError && <div>An error occured, please try again.</div>}\r\n      {isLoading ? (\r\n        <div>Loading...</div>\r\n      ) : (\r\n        <MovieContainer>\r\n          {data.map(movie => {\r\n            return (\r\n              <MovieCard movie={movie} handleMovieClick={handleMovieClick} />\r\n            );\r\n          })}\r\n        </MovieContainer>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpcomingMovies;\r\n","import React, { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport axios from \"axios\";\r\nimport MovieCard from \"../components/MovieCard/MovieCard\";\r\nimport Navigation from \"../components/Navigation/Navigation\";\r\nimport Search from \"../components/Search\";\r\n\r\nconst DiscoverByActor = props => {\r\n  const API_KEY = process.env.REACT_APP_TMDB_API_KEY;\r\n  const history = useHistory();\r\n  const {\r\n    movies,\r\n    isLoading,\r\n    clickedMovieState,\r\n    searchRequest,\r\n    searchComplete,\r\n    handleMovieClick\r\n  } = props;\r\n\r\n  const search = async query => {\r\n    searchRequest();\r\n    const response = await axios.get(\r\n      `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\r\n    );\r\n\r\n    // !! add error handling...\r\n    // Call function passed in as props to lift results up to state in App.js\r\n    return searchComplete(response.data.results);\r\n  };\r\n\r\n  // Append details object to each movie\r\n  const getDetails = async id => {\r\n    const response = await axios.get(\r\n      `https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}&language=en-US`\r\n    );\r\n\r\n    return response.data;\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   const fetchData = async () => {\r\n  //     searchRequest();\r\n  //     const response = await axios.get(\r\n  //       `https://api.themoviedb.org/3/movie/upcoming?api_key=${API_KEY}&language=en-US&page=1`\r\n  //     );\r\n\r\n  //     await Promise.all(\r\n  //       response.data.results.map(async movie => {\r\n  //         movie.details = await getDetails(movie.id);\r\n  //       })\r\n  //     );\r\n  //     !! add error handling...\r\n  //     Call function passed in as props to lift results up to state in App.js\r\n  //     searchComplete(response.data.results);\r\n  //   };\r\n  //   fetchData();\r\n  // }, []);\r\n\r\n  // // Append details object to each movie\r\n  // const getDetails = async id => {\r\n  //   const response = await axios.get(\r\n  //     `https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}&language=en-US`\r\n  //   );\r\n\r\n  //   return response.data;\r\n  // };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"header-container\">\r\n        <Navigation />\r\n      </div>\r\n      <Search onSubmit={search} />\r\n      <h1>\r\n        Type in a movie you've watched, and select an actor from that movie. A\r\n        list of movies will be selected.\r\n      </h1>\r\n      {movies.map(movie => {\r\n        return (\r\n          <MovieCard\r\n            movie={movie}\r\n            loading={isLoading}\r\n            handleMovieClick={handleMovieClick}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DiscoverByActor;\r\n\r\n// /discover/movie?sort_by=popularity.desc\r\n\r\n// in this component you need to:\r\n// call the above endpoint to gather data\r\n// show popular movies using moviecards as laid out in other page\r\n\r\n// map over movies once data is gathered, and display as on other page.\r\n\r\n// how would you use the reducer set up to send it your resutsl?//\r\n","import { hot } from \"react-hot-loader/root\";\r\nimport React, { useState } from \"react\";\r\nimport { Switch, Route, useHistory } from \"react-router-dom\";\r\nimport { createGlobalStyle } from \"styled-components\";\r\n\r\nimport Home from \"../pages/Home\";\r\nimport Favorites from \"../pages/Favorites\";\r\nimport FullMoviePage from \"../pages/FullMoviePage\";\r\nimport PopularMovies from \"../pages/PopularMovies\";\r\nimport UpcomingMovies from \"../pages/UpcomingMovies\";\r\nimport DiscoverByActor from \"../pages/DiscoverByActor\";\r\n\r\nimport \"../style.css\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n    @import url(\"https://fonts.googleapis.com/css?family=Titillium+Web:600i&display=swap\");\r\n    font-family: \"Titillium Web\";\r\n`;\r\n\r\n// const initialState = {\r\n//   pageData: {\r\n//     currentPage: 1,\r\n//     totalPages: null\r\n//   }\r\n// };\r\n\r\nconst App = () => {\r\n  const history = useHistory();\r\n  const [clickedMovieState, setClickedMovieState] = useState({\r\n    movie: []\r\n  });\r\n\r\n  const handleMovieClick = movie => {\r\n    setClickedMovieState({\r\n      movie\r\n    });\r\n    history.push(\"/moviepage\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <Switch>\r\n        <Route\r\n          exact\r\n          path=\"/\"\r\n          render={() => <Home handleMovieClick={handleMovieClick} />}\r\n        />\r\n        <Route\r\n          path=\"/moviepage\"\r\n          render={() => <FullMoviePage clickedMovieState={clickedMovieState} />}\r\n        />\r\n        <Route\r\n          path=\"/byactor\"\r\n          render={() => <DiscoverByActor handleMovieClick={handleMovieClick} />}\r\n        />\r\n        <Route path=\"/favorites\" component={Favorites} />\r\n        <Route\r\n          path=\"/popular\"\r\n          render={() => <PopularMovies handleMovieClick={handleMovieClick} />}\r\n        />\r\n        <Route\r\n          path=\"/upcoming\"\r\n          render={() => <UpcomingMovies handleMovieClick={handleMovieClick} />}\r\n        />\r\n      </Switch>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default process.env.NODE_ENV === \"development\" ? hot(App) : App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nimport App from \"./components/App\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.querySelector(\"#root\")\r\n);\r\n"],"sourceRoot":""}